def simular_comision_para_ingreso_digno(row):
    venta_cerveza = row['VENTA CERVEZA']
    ingreso_base = row['Total Income(Sin subsidio ni Com Cerveza)']
    ingreso_digno = 15000

    lista_incrementos = [0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.08, 0.09, 0.1,
                         0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2,
                         0.21, 0.22, 0.23, 0.24, 0.25]

    # Simular con todos los porcentajes de lista_incrementos
    for com in lista_incrementos:
        ingreso_simulado = ingreso_base + (venta_cerveza * com)
        if ingreso_simulado >= ingreso_digno:
            return com, ingreso_simulado, False  # Retorna el primer porcentaje que cumple

    # Si no se alcanza el ingreso digno con ningún porcentaje
    ingreso_maximo_posible = ingreso_base + (venta_cerveza * max(lista_incrementos))
    return ingreso_maximo_posible


def comparar_porcentajes(row):
    com_necesario = row['% Necesario para ingreso Digno']
    com_contrato = row['porcentaje_de_contrato']
    com_sugerida = row['% CV PROP']

    # Comparar los valores según las reglas
    if com_contrato >= com_necesario:
        return com_contrato  # El de contrato es suficiente
    elif com_necesario > com_sugerida:
        return com_sugerida  # El sugerido es menor que el necesario
    else:
        return com_necesario  # El necesario es el adecuado


def obtener_porcentaje_ajustado_y_comentario(row):
    ingreso_digno = 15000
    ingreso = row.get('Total Income sin subsidio', 0) 
    com_contrato = row.get('porcentaje_de_contrato', 0)
    com_sugerida = row.get('% CV PROP', 0)
    com_reciente = row.get('porcentaje_reciente', 0)
    com_hsk = row.get('porcentaje_hsk', None)
    fecha_ingreso = row.get('Fecha_Ingreso_Tienda', pd.NaT)
    htl = row.get('HTL', 0)

    if pd.isna(fecha_ingreso):
        return None, "Fecha de ingreso no válida", None

    antiguedad_dias = (fecha_mas_reciente - fecha_ingreso).days

    if ingreso >= ingreso_digno and com_sugerida > com_contrato and com_sugerida > com_reciente:
        com, ingreso_simulado, no_llega = simular_comision_para_ingreso_digno(row)
        if no_llega:
            return com, "Ni con 25% alcanza ingreso digno1", ingreso_simulado
        return com, "Ya tiene ingreso digno pero podríamos aumentar su comisión", ingreso_simulado

    elif ingreso >= ingreso_digno and com_sugerida < com_contrato and com_sugerida < com_reciente:
        com, ingreso_simulado, no_llega = simular_comision_para_ingreso_digno(row)
        if no_llega:
            return com, "Ni con 25% alcanza ingreso digno2", ingreso_simulado
        return com, "Ya tiene ingreso digno pero podríamos reducir su comisión", ingreso_simulado

    elif ingreso >= ingreso_digno:
        ingreso_base = row['Total Income(Sin subsidio ni Com Cerveza)']
        com = 0
        ingreso_simulado = ingreso_base + (row['VENTA CERVEZA'] * com)
        return com, "Ya tiene ingreso digno", ingreso_simulado

    elif pd.notnull(com_hsk):
        ingreso_base = row['Total Income(Sin subsidio ni Com Cerveza)']
        ingreso_simulado = ingreso_base + (row['VENTA CERVEZA'] * com_hsk)
        return com_hsk, "Es HSK", ingreso_simulado

    elif antiguedad_dias < 365 and htl <= 11:
        ingreso_base = row['Total Income(Sin subsidio ni Com Cerveza)']
        ingreso_simulado = ingreso_base
        return 0, "New SK - La antigüedad entra en política de subsidios y promedia <=11 hL Avg", ingreso_simulado

    elif antiguedad_dias < 365 and htl > 11 and ingreso >= ingreso_digno:
        ingreso_base = row['Total Income(Sin subsidio ni Com Cerveza)']
        ingreso_simulado = ingreso_base
        return 0, "New SK - Ingreso digno, la antigüedad en política de subsidios y promedia arriba de 11 hL Avg", ingreso_simulado

    elif antiguedad_dias < 365 and htl > 11 and ingreso < ingreso_digno:
        com, ingreso_simulado, no_llega = simular_comision_para_ingreso_digno(row)
        if no_llega:
            return com, "Ni con 25% alcanza ingreso digno3", ingreso_simulado
        return com, "New SK - No alcanza ingreso digno, la antigüedad en política de subsidios y promedia arriba de 11 hL Avg", ingreso_simulado

    elif ingreso < ingreso_digno and com_sugerida <= com_contrato:
        com, ingreso_simulado, no_llega = simular_comision_para_ingreso_digno(row)
        if no_llega:
            return com, "Ni con 25% alcanza ingreso digno4", ingreso_simulado
        return com, "No alcanza ingreso digno, pero ya está ajustado o excede tabulador", ingreso_simulado

    elif ingreso < ingreso_digno and com_sugerida > com_contrato:
        com, ingreso_simulado, no_llega = simular_comision_para_ingreso_digno(row)
        if no_llega:
            return com, "Ni con 25% alcanza ingreso digno5", ingreso_simulado
        return com, "No alcanza ingreso digno, necesita análisis para ajuste de porcentaje", ingreso_simulado

    return None, "", None


pivot_analisis[['% Necesario para ingreso Digno', 'Comentarios', 'Ingreso Total Simulado']] = pivot_analisis.apply(
    obtener_porcentaje_ajustado_y_comentario, axis=1, result_type='expand'
)

pivot_analisis['¿Se Ajustó?'] = pivot_analisis.apply(
    lambda row: 'Sí' if row['% Necesario para ingreso Digno'] != row['porcentaje_de_contrato'] else 'No',
    axis=1
)


def calcular_diferencia(row):
    try:
        if row['% Necesario para ingreso Digno'] == 0:
            return 0
        elif row['Comentarios'] == 'Excede el tabulador de comisión':
            return -row['% CV PROP']
        elif isinstance(row['% Necesario para ingreso Digno'], (int, float)) and isinstance(row['porcentaje_de_contrato'], (int, float)):
            return row['% Necesario para ingreso Digno'] - row['porcentaje_de_contrato']
        else:
            return 0
    except Exception:
        return 0


pivot_analisis['Diferencia'] = pivot_analisis.apply(calcular_diferencia, axis=1)
pivot_analisis['Costo Diferencia'] = pivot_analisis['Diferencia'] * 100 * pivot_analisis['Costo_Punto_Porcentual_Cerveza']
pivot_analisis['Costo Diferencia 12M'] = pivot_analisis['Costo Diferencia'] * 12

pivot_analisis.to_excel('pivot.xlsx')

print("Archivo guardado éxitosamente")
end_time = time.time()
elapsed_time = end_time - start_time
minutes, seconds = divmod(elapsed_time, 60)
print(f"El código tardó {int(minutes)} minutos y {seconds:.2f} segundos en ejecutarse.")
