import pandas as pd
from datetime import datetime
import time
import pygame
import os
#Necesita actualizado: PO, Archivo con Diccionario de subdivisiones, Planta Nomina y el archivo que sale del .py anterior (0. Concat Metas region SIX)
####### !!!!!!! indispensable tener actualizado el diccionario de subsivisiones ( 1.0_Dict_subdivisiones ) 'ultima actualizacion del diccionario  el 05-06-25' y 
####### !!!!!!!  una lista en el punto 2.7 (buscar con ctrl + F) de este codigo que filtra las posiciones que deben
####### !!!!!!! 3.0 para si quieres activar el acelerador de cerveza
inicio = time.time()

fecha_actual = datetime.now()

#solo para nombre del archivo
#periodo = 'Enero Pago Dic 2025'

# Ruta completa de archivos requeridos
ruta_consolidado_metas = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Metas_region Mayo 2025.xlsx'
ruta_po = r'C:\Users\dominh05\Documents\PO\PO 2025\05. PO Mayo 2025.xlsx'
ruta_subdivisiones = r'C:\Users\dominh05\Documents\SIX\Diccionario subdivisiones.xlsx'
ruta_planta_nomina = r'C:\Users\dominh05\Documents\Planta Nominas 2025\Planta nomina 2 de junio.xlsx'


#rutas
metas = pd.read_excel(ruta_consolidado_metas)
po =  pd.read_excel(ruta_po)
pn =  pd.read_excel(ruta_planta_nomina)
subdivisiones = pd.read_excel(ruta_subdivisiones)

# Obtener los valores de los encabezados de las columnas 'Ruta' y 'Número SOCIO' para limpiar el archivo de Metas
header_ruta = 'Ruta'
header_numero_socio = 'Número'

# Eliminar filas donde los valores en columna 'Ruta' no sea  igual al encabezado y que no sean NaN
condicion = (
    (metas['Ruta'] != header_ruta) &
    pd.notna(metas['Ruta'])
)

metas = metas[condicion]
#llenamos los vacios como Vacante
metas['Número'] = metas['Número'].fillna('Vacante')

#creación de diccionarios
dict_wl = pn.set_index('Nº pers.')['SDvPer.'].to_dict()
dict_zona = subdivisiones.set_index('SDvPer.') ['Zona'].to_dict()
dict_line_manager = po.set_index('Local Personnel ID')['Line Manager'].to_dict()
dict_pos_num_local = pn.set_index('Nº pers.')['Posición'].to_dict()
dict_posiciones = pn.set_index('Nº pers.')['Posición.1'].to_dict()
dict_nombres = pn.set_index('Nº pers.')['Nombre de personal'].to_dict()

# Usar map para realizar el lookup
metas['Work Location'] = metas['Número'].map(dict_wl)
metas['Zona'] = metas['Work Location'].map(dict_zona)
metas['Line Manager'] = metas['Número'].map(dict_line_manager)
metas['No_Puesto_Local'] = metas['Número'].map(dict_pos_num_local)
metas['Puesto'] = metas['Número'].map(dict_posiciones)
metas['Nombre SAP'] = metas['Número'].map(dict_nombres)

#filas e-commerce
# Definir la condición para las filas donde 'Ruta' es 'E-commerce'
condicion_ecommerce = (metas['Ruta'] == 'E-commerce')

#esta lista se utiliza más adelante para actualizar  los valores de estas columnas a "vacante" o "baja" cuando la fila es de este tipo
columnas_a_actualizar = [
    'Plaza',
    #'Número',
    #'Nombre',
    'Posición',
    'EJECUCION',
    'Meta Cerveza',
    'Cigarros',
    'RTDs',
    'SPIRITS',
    'Rehidratantes',
    'TAE',
    'Meta OC',
    'Meta  total mes',
    'Unnamed: 16',
    'Unnamed: 17',
    'Unnamed: 18',
    'Work Location',
    'Zona',
    'Line Manager',
    'Puesto',
    #'Nombre SAP'
]

#pongo Vacante en las metas de rutas Vacante, basandome en la columna Número
condicion_vacante = metas['Número'].str.contains('Vacante', case=False, na=False)
metas.loc[condicion_vacante, columnas_a_actualizar] = 'Vacante'

#Condicion es baja
condicion_socio_es_baja = (metas['Puesto'] == 'Integración: Posición por defecto')
metas.loc[condicion_socio_es_baja, columnas_a_actualizar] = 'BAJA'

# esta lista se utiliza más adelante para actualizar todos los valores estas columnas a "ecommerce" cuando la fila es de este tipo
columnas_a_actualizar_ecommerce = [
    'Plaza',
    'Número',
    'Nombre',
    'Posición',
    #'EJECUCION',
    #'Meta Cerveza',
    #'Cigarros',
    #'RTDs',
    #'SPIRITS',
    #'Rehidratantes',
    #'TAE',
    #'Meta OC',
    #'Meta  total mes',
    'Unnamed: 16',
    'Unnamed: 17',
    'Unnamed: 18',
    'Work Location',
    'Zona',
    'Line Manager',
    'Puesto',
    #'Nombre SAP'
]

# Actualizar las columnas para las filas donde se cumple la condición
metas.loc[condicion_ecommerce, columnas_a_actualizar_ecommerce] = 'E-commerce'

# Crear los diccionarios como se requiere
dict_no_sap_id_global = po.set_index('Global Personnel ID')['Local Personnel ID'].to_dict()

# Crea columnas para la sig función' en el DataFrame metas
metas['Num sugerido'] = ''
metas['Comentarios'] = ''

# funcion para rellenar con sugerencias de validación

#esta funcion valida si ['Nombre SAP'] tiene un valor diferente a NaN, en caso de que no busca interpreta el valor de  ['Número'] como si fuera ID Local y hace una sugerencia con ese valor

def fill_field(row, col_clave_a_validar, lookup_dict, comment_default, comment_not_found):
    if pd.isnull(row[col_clave_a_validar]):  # Si el valor en la columna clave es NaN
        global_id = row['Número']
        #si el valor es Vacante o ECommerce ahi la deja
        if global_id == 'Vacante' or global_id == 'E-commerce':
            row['Comentarios'] = ''
        #si el valor de Número esta en dict_no_sap_id_global
        elif global_id in lookup_dict:
            # Si ['Número'] es NaN usa el valor de ['Número'] para buscar en un diccionario y regresarme el número de ID Local 
            row['Num sugerido'] = lookup_dict[global_id]
            # Llenar los otros campos con el valor de 'Num sugerido' (osease el ID Local) si existen los diccionarios correspondientes
            row['Work Location'] = dict_wl.get(row['Num sugerido'], '')  # Usar get para evitar errores si no existe la clave
            row['Zona'] = dict_zona.get(row['Work Location'], '')
            row['Line Manager'] = dict_line_manager.get(row['Num sugerido'], '')
            row['No_Puesto_Local'] = dict_no_sap_id_global.get(row['Num sugerido'], '')
            row['Puesto'] = dict_posiciones.get(row['Num sugerido'], '')
            row['Nombre SAP'] = dict_nombres.get(row['Num sugerido'], '')
            # Actualizar el comentario con la información obtenida
            row['Comentarios'] = f"{lookup_dict[global_id]} {comment_default}"
        else:
            # Comentario cuando no se encuentra el valor en el diccionario
            row['Comentarios'] = comment_not_found
    return row

# Aplicar la función usando `apply` y actualizar en una sola línea
metas = metas.apply(lambda row: fill_field(row, 'Nombre SAP', dict_no_sap_id_global, "obtenido de po", "Número no existente en SAP ni MyHR"), axis=1)


########################## check hasta aqui  1.0_Dict_subdivisiones
# Comienza el proceso para agregar socios que no tienen meta

# crea lista con las sub de six
subdivisiones_six = subdivisiones['SDvPer.'].unique().tolist()

#socios que si tienen meta
socios_con_meta = metas['Número'].unique().tolist()
# Filtrar los socios que están en pn y están en subdivisiones_six
socios_six = pn[pn['SDvPer.'].isin(subdivisiones_six)]
#filtrar que tengan cova
socios_six_con_cova = socios_six[(socios_six['CC-nómina.1'] == 'Base Variable') | (socios_six['CC-nómina.1'] == 'Base Variable Diaria')]
#Filtra los socios de six que no tienen meta
socios_six_sin_metas = socios_six_con_cova[~socios_six_con_cova['Nº pers.'].isin(socios_con_meta)]

#Columnas clave del planta nómina
columnas_socios_sin_meta = [
    'Nº pers.',
    'Nombre de personal',
    'Posición.1',
    'SDvPer.'
]

#Crea el dataframe con las columnas de 'columnas_socios_sin_meta' para los socios sin metas
socios_six_sin_metas = socios_six_sin_metas[columnas_socios_sin_meta]

#Condición para quitar socios bajas inactivos
condicion = socios_six_sin_metas['Posición.1'] != 'Integración: Posición por defecto'

# Aplicar la condición para quitar socios bajas inactivos
socios_six_sin_metas = socios_six_sin_metas[condicion]

# Eliminar duplicados en la columna 'Nº pers.'
socios_six_sin_metas = socios_six_sin_metas.drop_duplicates(subset=['Nº pers.'])

#renombra las columnas del planta nomina para que hagan match con nuestro archivo
rename_columnas_socios_sin_meta = [
    'Número',
    'Nombre',
    'Posición',
    'Work Location'
]
socios_six_sin_metas.columns = rename_columnas_socios_sin_meta
################################################################ 2.7
####!!!!!!!!!!!!!!!! mantener actualizado estos campos
strings_a_buscar = ['Asesor', 'Jefatura Operaciones', 'Jefe Operaciones']
filtro = socios_six_sin_metas['Posición'].str.contains('|'.join(strings_a_buscar), case=False)

# Aplicar el filtro al DataFrame original
socios_six_sin_meta_filtrados = socios_six_sin_metas[filtro]

# rellena columnas meta para poder identificarlos estos socios "sin meta" que agregue
socios_six_sin_meta_filtrados['Sin Meta'] = 'SIN METAS'
socios_six_sin_meta_filtrados['Archivo'] = 'Planta Nomina'
socios_six_sin_meta_filtrados['Ruta'] = 'SIN RUTA'

# Crear las nuevas columnas basadas en los diccionarios
socios_six_sin_meta_filtrados['Zona'] = socios_six_sin_meta_filtrados['Work Location'].map(dict_zona)
socios_six_sin_meta_filtrados['Line Manager'] = socios_six_sin_meta_filtrados['Número'].map(dict_line_manager)
socios_six_sin_meta_filtrados['No_Puesto_Local'] = socios_six_sin_meta_filtrados['Número'].map(dict_pos_num_local)
socios_six_sin_meta_filtrados['Puesto'] = socios_six_sin_meta_filtrados['Número'].map(dict_posiciones)
socios_six_sin_meta_filtrados['Nombre SAP'] = socios_six_sin_meta_filtrados['Número'].map(dict_nombres)

# Obtener el índice del último valor más uno para agregar estos socios a mi dataframe inicial
ultimo_indice_metas = len(metas)
#falta limpiar más el archivo de metas
concatenado = pd.concat([metas, socios_six_sin_meta_filtrados], ignore_index=True)

#################### Check 5 DE NOVIEMBRE

#validar que la region y la subdivision si coincidan, tanto en nuestro diccionario como en el archivo que nos comparte region
# Crear el diccionario para mapear la región desde 'Work Location'
subdivisiones_region = subdivisiones.set_index('SDvPer.')['Región'].to_dict()
concatenado['Region_segun_dict'] = concatenado['Work Location'].map(subdivisiones_region)
concatenado['Validación_Región'] = ''  # Inicializar la columna para validación

def validar_actualizar_region(row):
    region = row['Región']
    region_segun_dict = row['Region_segun_dict']
    
    if pd.isna(region):  # Si Región es NaN
        row['Región'] = region_segun_dict  # Asignar la región según el diccionario
        # Si es sin meta, pon la del diccionario
    elif row['Ruta'] == 'SIN RUTA':  # Si Ruta es 'SIN RUTA'
        row['Región'] = row['Region_segun_dict']  # Asignar la región según el diccionario
        # Si es ecommerce, rellena
    elif row['Ruta'] == 'E-commerce':  # Si Ruta es 'E-commerce'
        row['Región'] = 'E-commerce'  # Asignar 'E-commerce' a Región
        # Si es vacante, rellena
    elif row['Número'] == 'Vacante':  # Si Número es 'Vacante'
        row['Región'] = 'Vacante'  # Asignar 'Vacante' a Región
    # Si es BAJA, rellena
    elif row['Posición'] == 'BAJA':  # Si Número es 'BAJA'
        row['Región'] = 'BAJA'  # Asignar 'BAJA' a Región
    elif pd.isna(region_segun_dict) or region != region_segun_dict:  # Si region_segun_dict está vacío o no coincide
        row['Validación_Región'] = 'Validar Region'  # Poner comentario si no coincide
    else:
        row['Validación_Región'] = ''  # Si coinciden, dejar vacío o poner otro valor

    return row  # Devolver la fila completa

# Aplicar la función al DataFrame
concatenado = concatenado.apply(validar_actualizar_region, axis=1)

# Elimina columnas no deseadas
concatenado = concatenado.drop(columns=['Unnamed: 0', 'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18'])

def rellenar_nombres_SAP(row):
    if pd.isna(row['Nombre SAP']) and row['Número'] == 'Vacante':
        row['Nombre SAP'] = 'Vacante'
    elif pd.isna(row['Nombre SAP']) and row['Número'] == 'E-commerce':
        row['Nombre SAP'] = 'E-commerce'
    return row  # Devuelve siempre la fila completa
concatenado = concatenado.apply(rellenar_nombres_SAP, axis=1)

concatenado['Puesto'] = concatenado['Puesto'].fillna('validar') 
  
 
#esquemas standard
#esquema sin acelerador  
def asignar_esquema(row):
   if row['Puesto'] == 'Asesoria Dinamica Control SIX':
       return 'SIX-ASESOR-CONTROL ARQ45-LP25-FRIOS15-GE15'
   elif 'Indirecto' in row['Puesto']:
       return 'SIX-ASESOR ING30-EJ20-TSV20-OTS30'
   elif row['Work Location'] == 'QR1S' and row['Line Manager'] == 'Lucero del Carmen Aguirre Rodriguez':
       return 'SIX-ASESOR ING30-AD40-TSV30'
   else:
       return 'SIX-ASESOR ING25-OC25-TSV20-AD30'

# # 3.0 esquema con acelerador
# def asignar_esquema(row):
#     if row['Puesto'] == 'Asesoria Dinamica Control SIX':
#         return 'SIX-ASESOR-CONTROL ARQ30-LP30-FRIOS25-GE15 acelerador'
#     elif 'Indirecto' in row['Puesto']:
#         return 'SIX-ASESOR ING45-EJ15-TSV20-OTS20 acelerador'
#     elif row['Work Location'] == 'QR1S' and row['Line Manager'] == 'Lucero del Carmen Aguirre Rodriguez':
#         return 'SIX-ASESOR ING50-AD20-TSV30 acelerador'
#     else:
#         return 'SIX-ASESOR ING45-OC20-TSV20-AD15 aceleardor'

concatenado['Esquema'] = concatenado.apply(asignar_esquema, axis=1)

# Guardar el archivo
concatenado.to_excel('Metas_para_revisión_comentarios_plaza_esteeeeeee.xlsx', index=False)

fin = time.time() - inicio
fin = fin / 60
print(f'Resultado tomó {fin} minutos.')
print('Proceso terminado exitosamente')
pygame.init()

# Ruta del archivo de audio
audio_file = r'C:\Users\dominh05\Documents\My project (37).wav'

# Verificar si el archivo existe
if not os.path.exists(audio_file):
    print(f"El archivo '{audio_file}' no existe.")
else:
    # Reproducir el archivo de audio
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()

    # Esperar hasta que la música termine de reproducirse
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

# Terminar pygame
pygame.quit()
