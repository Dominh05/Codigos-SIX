import pandas as pd
import os
from datetime import datetime
import pygame
import os
import time
#!!!!!!! requiera cuando calculcemos metas tener actualizado r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Reportes de realesTablas_ICM.xlsx'
#!!!!!!! actualizar los archivos de donde jalas los reales

# Pon el último dia del mes que estas pagando, ej. oct pago nov, pones último de octubre
fecha_actual_str = '2025-05-31'
#esta variable es para nombre del archivo cuando lo exportemos, no afecta en la funcionalidad del codigo
mes = 'Mayo'

inicio = time.time()
# Convertir la fecha a un objeto datetime
fecha_actual = datetime.strptime(fecha_actual_str, '%Y-%m-%d')
#Ruta a carpeta con archivos necesarios
ruta_documentos_de_apoyo= r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Reportes de reales'
ruta_metas_trabajado = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Metas_para_revisión_comentarios_plaza_esteeeeeee.xlsx'
ruta_planta_nomina = r'C:\Users\dominh05\Documents\Planta Nominas 2025\Planta nomina 2 de junio.xlsx'
ruta_po = r'C:\Users\dominh05\Documents\PO\PO 2025\05. PO Mayo 2025.xlsx'
ruta_SA068 = os.path.join(ruta_documentos_de_apoyo, 'SA068 - Base Ingresos COVA Cierre Mayo.xlsx')
ruta_data_dashboard_AD = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Reportes de reales\Data_asesoria_dinamica.xlsx'
ruta_conteo_tiendas = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Conteo de tiendas.xlsx'
ruta_tsv = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Reportes de reales\Detalle_TSV.xlsx'
ruta_reporte_ejecución = os.path.join(ruta_documentos_de_apoyo, 'Metas y Reales de Ejecución.xlsx')

archivo_maye = os.path.join(ruta_documentos_de_apoyo, 'Mediciones efectividad AD Control.xlsb')
pn =  pd.read_excel(ruta_planta_nomina)
po =  pd.read_excel(ruta_po)
metas = pd.read_excel(ruta_metas_trabajado)

#obtener fecha de antiguedad en su último puesto de PO y PN
dict_fecha_antiguedad_po = po.set_index('Local Personnel ID')['Position Assignment Date'].to_dict()
dict_fecha_antiguedad_pn = pn.set_index('Nº pers.')['Desde'].to_dict()

metas['Fecha inicio puesto'] = metas['Número'].map(dict_fecha_antiguedad_po)

# Función para llenar valores faltantes usando el segundo diccionario
def fill_missing_dates(row):
    if pd.isnull(row['Fecha inicio puesto']):
        n_socio = row['Número']
        if n_socio in dict_fecha_antiguedad_pn:
            return dict_fecha_antiguedad_pn[n_socio]
    return row['Fecha inicio puesto']

# Aplicar la función para llenar valores faltantes
metas['Fecha inicio puesto'] = metas.apply(fill_missing_dates, axis=1)
metas['Fecha inicio puesto'] = pd.to_datetime(metas['Fecha inicio puesto'])
def calcular_meses(row):
    fecha_inicio = row['Fecha inicio puesto']
    return (fecha_actual.year - fecha_inicio.year) * 12 + fecha_actual.month - fecha_inicio.month

# Aplicar la función a cada fila del DataFrame
metas['Meses Posicion'] = metas.apply(calcular_meses, axis=1)

#Obtener sueldos
pn['Codigo_duplicados'] = pn['Nº pers.'].astype(str) + pn['CC-nómina'].astype(str)
pn_sin_duplicados = pn.drop_duplicates(subset='Codigo_duplicados')
lista_conceptos_diario = [
    "Base Variable Diaria",
    "Sueldo catorcenal Sindica",
    "Sueldo Ordinario Sindical",
    "Comisión Fija Sindicaliza",
    "Comision Garantia"
]
#convierte a mensual la suma de los sueldos que tiene el socio en planta Nominas
pn['Sueldo mensual'] = pn.apply(
    lambda row: row['Sueldo diario/mensual'] * 30 if row['CC-nómina.1'] in lista_conceptos_diario else row['Sueldo diario/mensual'],
    axis=1
)

lista_conceptos_cova = [
    "Base Variable Diaria",
    "Base Variable"]

# Crear nuevas columnas 'Base Variable' y 'Sueldo Fijo'
pn['Base Variable'] = pn.apply(
    lambda row: row['Sueldo mensual'] if row['CC-nómina.1'] in lista_conceptos_cova else 0,
    axis=1
)

pn['Sueldo Fijo'] = pn.apply(
    lambda row: row['Sueldo mensual'] if row['CC-nómina.1'] not in lista_conceptos_cova else 0,
    axis=1
)
grouped_df = pn.groupby('Nº pers.').agg({
    'Sueldo mensual': 'sum',
    'Base Variable': 'sum',
    'Sueldo Fijo': 'sum'
}).reset_index()

dict_sueldo_total = grouped_df.set_index('Nº pers.')['Sueldo mensual'].to_dict()
metas['Total Mes'] = metas['Número'].map(dict_sueldo_total)

dict_sueldo_total = grouped_df.set_index('Nº pers.')['Sueldo Fijo'].to_dict()
metas['Fijo'] = metas['Número'].map(dict_sueldo_total)

dict_sueldo_total = grouped_df.set_index('Nº pers.')['Base Variable'].to_dict()
metas['Base Variable'] = metas['Número'].map(dict_sueldo_total)

# Calcula 'Mix Actual' como la proporción de 'Fijo' sobre 'Total Mes'
metas['Mix Actual'] = (metas['Fijo'] / metas['Total Mes']) * 100

# Formatea 'Mix Actual' como un porcentaje
metas['Mix Actual'] = metas['Mix Actual'].apply(lambda x: f"{x:.2f}%")
######################## Vacio de metas para CoVa


reporte_ejecución = pd.read_excel(ruta_reporte_ejecución)
sA068 = pd.read_excel(ruta_SA068)
#rellena con 0 los blanks para que las sumas salgan correctas
columnas_a_llenar_sa068 = ['CERVEZA', 'SIDRA', 'CIGARRO', 'REHIDRATANTES', 'RTD', 'SPIRITS', 'TAE']
sA068[columnas_a_llenar_sa068] = sA068[columnas_a_llenar_sa068].fillna(0)

#calcula real cerveza
sA068['Real_Cerveza'] = sA068['CERVEZA'] + sA068['SIDRA']
#calcula real otras categorias
sA068['Real_Otras_Categorías'] = sA068['CIGARRO'] + sA068['REHIDRATANTES'] + sA068['RTD'] + sA068['SPIRITS'] + sA068['TAE']

#vacía metas ejecución
dict_meta_ejecuccion = reporte_ejecución.set_index('Número de empleado')['Meta Ejecución'].to_dict()
metas['Meta_Ejecución'] = metas['Número'].map(dict_meta_ejecuccion)
#vacía real ejecución
dict_real_ejecuccion = reporte_ejecución.set_index('Número de empleado')['Real Ejecución'].to_dict()
metas['Real_Ejecución'] = metas['Número'].map(dict_real_ejecuccion)

#vacía real cerveza
dict_real_cerveza = sA068.set_index('Número')['Real_Cerveza'].to_dict()
metas['Real_Ingreso_Cerveza'] = metas['Número'].map(dict_real_cerveza)
#vacía real otras categorías
dict_real_OC = sA068.set_index('Número')['Real_Otras_Categorías'].to_dict()
metas['Real_Otras_Categorías'] = metas['Número'].map(dict_real_OC)

# vaciado de info tsv
#ruta archivos

conteo_tiendas = pd.read_excel(ruta_conteo_tiendas)
detalle_tsv = pd.read_excel(ruta_tsv)

#conteo de tiendas six
dict_conteo_tiendas = conteo_tiendas.set_index('Responsable')['Ceco_Count'].to_dict()
metas['Cantidad_de_Negocios'] = metas['Número'].map(dict_conteo_tiendas)

#look up de cantidad TSV
dict_tsv = detalle_tsv.set_index('Número')['TSV'].to_dict()
metas['TSV'] = metas['Número'].map(dict_tsv)

#si no encuentra TSV pone cero
metas['TSV'] = metas['TSV'].fillna(0)
#vaciado de Asesoria Dínamica
#ruta archivos
dashboard_AD = pd.read_excel(ruta_data_dashboard_AD)
#lookup eficiencia de visita
# Convierte a mayúsculas las columnas necesarias para evitar errores
metas['Puesto'] = metas['Puesto'].str.upper()
metas['Ruta'] = metas['Ruta'].astype(str).str.upper()
dict_Eficiencia_de_Visita = dashboard_AD.set_index('ZPV-Ruta')['% Eficiencia de Visita'].to_dict()
metas['Eficiencia_de_Visita'] = metas['Ruta'].map(dict_Eficiencia_de_Visita)

dashboard_AD_jos = pd.read_excel(ruta_data_dashboard_AD,sheet_name='Efectividad_JOS')
dashboard_AD_jos['JOS'] = dashboard_AD_jos['JOS'] .str.upper()
dict_Efectividad_de_Asesoria_jos = dashboard_AD_jos.set_index('JOS')['Efectividad '].to_dict()

dashboard_AD_ac = pd.read_excel(ruta_data_dashboard_AD,'Efectividad_AC')
dashboard_AD_ac['Asesor'] = dashboard_AD_ac['Asesor'] .str.upper()
dict_Efectividad_de_Asesoria_ac = dashboard_AD_ac.set_index('Asesor')['Efectividad'].to_dict()

# Diccionario Puesto -> Departamento (también en mayúsculas)
dict_puesto_departamento = {
    "ASESORIA DINAMICA COMERCIAL SIX": "ACS",
    "JEFATURA OPERACIONES SIX": "JOS",
    "JEFATURA OPERACIONES SIX": "JOS",
    "ASESORIA DINAMICA TRADICIONAL SIX": "ACS",
    "ASESORIA COMERCIAL SIX INDIRECTOS": "ACS",
    "JEFATURA OPERACIONES SIX INDIRECTOS": "JOS",
    "JEFE DE OPERACIONES": "JOS",
    "E-COMMERCE": "Vacante",
    "VACANTE": "Vacante",
    "ASESORIA DINAMICA CONTROL SIX": "ACS",
    "BAJA": "Vacante",
    "ASESORIA SUPLENTE SIX": "ACS",
    "ASESORIA COMERCIAL SIX": "ACS",
    "TEMINC ASESORIA COMERCIAL SIX": "ACS",
    "TEMINC JEFATURA OPERACIONES SIX": "JOS",
    "JEFATURA VENTAS": "JOS"
}

def obtener_efectividad(row):
    depto = dict_puesto_departamento.get(row['Puesto'], None)
    if depto == "ACS":
        return dict_Efectividad_de_Asesoria_ac.get(row['Ruta'], None)
    elif depto == "JOS":
        return dict_Efectividad_de_Asesoria_jos.get(row['Ruta'], None)
    else:
        return None

metas['Efectividad_de_Asesoria'] = metas.apply(obtener_efectividad, axis=1)


############################################################################################# metas especiales de TSV para NORESTE
#ruta_metas_tsv_noreste = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Reportes de reales\Metas TSV_JOS para noreste 2024.xlsx'
#metas_especiales_tsv_noreste = pd.read_excel(ruta_metas_tsv_noreste)
#vaciado de metas especiales tsv
#dict_Efectividad_de_Asesoria = metas_especiales_tsv_noreste.set_index('Número')['Dic'].to_dict()
metas['Metas TSV'] = ''
metas['Tabla TSV'] = ''
metas['Logro Ejecución'] = ''
metas['Logro redondeado Ejecución'] =''
metas['Monto Ejecución'] = ''

metas['Logro Cerveza'] = ''
metas['Logro redondeado Cerveza'] =''
metas['Monto Cerveza'] = ''
metas['Grupo Cerveza'] = ''

metas['Logro Otras Categorias'] = ''
metas['Logro redondeado Otras Categorias'] =''
metas['Monto Otras Categorias'] = ''

metas['Logro TSV'] = ''
metas['Logro redondeado TSV'] =''
metas['Monto TSV'] = ''

metas['Cumplimiento Eficiencia'] = ''
metas['Porcentaje Logro'] =''
metas['Porcentaje Pago AD'] = ''
metas['Porcentaje Pago AD'] = ''
metas['Monto AD'] = ''

orden_columnas = [
    "Región", "Plaza", "Ruta", "Número", "Nombre", "Posición", "EJECUCION", 
    "Cigarros", "RTDs", "SPIRITS", "Rehidratantes", "TAE", 
    "Meta  total mes", "Archivo", "Work Location", "Zona", 
    "Line Manager", "No_Puesto_Local", "Puesto", "Nombre SAP", "Num sugerido", 
    "Comentarios", "Sin Meta", "Region_segun_dict", "Validación_Región", 
    "Esquema", "Fecha inicio puesto", "Meses Posicion", "Total Mes", "Fijo", 
    "Base Variable", "Mix Actual", "Meta_Ejecución", "Real_Ejecución", 'Logro Ejecución', 'Logro redondeado Ejecución','Monto Ejecución',
    "Meta Cerveza","Real_Ingreso_Cerveza",'Logro Cerveza', 'Logro redondeado Cerveza','Monto Cerveza','Grupo Cerveza',
    "Meta OC", "Real_Otras_Categorías", 'Logro Otras Categorias', 'Logro redondeado Otras Categorias','Monto Otras Categorias',
    "Cantidad_de_Negocios", "TSV",  "Metas TSV", 'Tabla TSV','Logro TSV', 'Logro redondeado TSV','Monto TSV',
    "Eficiencia_de_Visita", "Efectividad_de_Asesoria", 'Cumplimiento Eficiencia', 'Porcentaje Logro','Porcentaje Pago AD', 'Monto AD'
]
metas = metas[orden_columnas]

dict_JB = pn.set_index('Nº pers.')['Gr.prof.'].to_dict()
metas['Job Grade'] = metas['Número'].map(dict_JB)


# Leer el archivo XLSB
resultados_control = pd.read_excel(archivo_maye, engine='pyxlsb')

resultados_control.rename(columns={
    'Unnamed: 2' : 'Número_de_empleado',
    'Unnamed: 32': 'Logro_Arqueos',
    'Unnamed: 46': 'Logro_Permisos',
    'Unnamed: 57': 'Logro_Frios',
    'Unnamed: 68': 'Logro_Energia'
}, inplace=True)

resultados_control['Número_de_empleado'] = resultados_control['Número_de_empleado'].astype(str)

dict_logro_arqueos = resultados_control.set_index('Número_de_empleado')['Logro_Arqueos'].to_dict()
metas['Logro_Arqueos'] = metas['Número'].map(dict_logro_arqueos)
dict_logro_Permisos= resultados_control.set_index('Número_de_empleado')['Logro_Permisos'].to_dict()
metas['Logro_Permisos'] = metas['Número'].map(dict_logro_Permisos)

dict_logro_Frios= resultados_control.set_index('Número_de_empleado')['Logro_Frios'].to_dict()
metas['Logro_Frios'] = metas['Número'].map(dict_logro_Frios)

dict_logro_Energia= resultados_control.set_index('Número_de_empleado')['Logro_Energia'].to_dict()
metas['Logro_Energia'] = metas['Número'].map(dict_logro_Energia)
print(resultados_control['Número_de_empleado'])

############################################################################################# metas especiales de TSV para NORESTE

#pa vaciar el cova en el excel, hasta aqui esta bien

###################################  check, validado. Aquí ya sale el archivo que se envia a Jefes de venta para pedir ejecución check
# ruta_documentos_de_apoyo = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Configuraciones ICM'
# ruta_tablas_ICM = os.path.join(ruta_documentos_de_apoyo, 'Tablas_ICM.xlsx')

# # Cargar cada hoja del archivo de Excel en un DataFrame y lo filtra al infinito 9998-12-31
# Scheme_KPI = pd.read_excel(ruta_tablas_ICM, sheet_name="Scheme_KPI")
# Scheme_KPI['DTEndPeriod'] = Scheme_KPI['DTEndPeriod'].astype(str).str.strip()
# Scheme_KPI = Scheme_KPI[Scheme_KPI['DTEndPeriod'] == '9998-12-31 00:00:00']

# Pl_KPI = pd.read_excel(ruta_tablas_ICM, sheet_name="Pl_KPI")

# Attainment_Table = pd.read_excel(ruta_tablas_ICM, sheet_name="Attainment_Table")
# Attainment_Table['DTEndPeriod'] = Attainment_Table['DTEndPeriod'].astype(str).str.strip()
# Attainment_Table = Attainment_Table[Attainment_Table['DTEndPeriod'] == '9998-12-31 00:00:00']

# KPI_Table = pd.read_excel(ruta_tablas_ICM, sheet_name="KPI_Table")
# KPI_Table['DTEndPeriod'] = KPI_Table['DTEndPeriod'].astype(str).str.strip()
# KPI_Table = KPI_Table[KPI_Table['DTEndPeriod'] == '9998-12-31 00:00:00']

# Route_KPI_Table = pd.read_excel(ruta_tablas_ICM, sheet_name="Route_KPI_Table")
# Route_KPI_Table['DTEndPeriod'] = Route_KPI_Table['DTEndPeriod'].astype(str).str.strip()
# Route_KPI_Table = Route_KPI_Table[Route_KPI_Table['DTEndPeriod'] == '9998-12-31 00:00:00']

# Route_Indicators = pd.read_excel(ruta_tablas_ICM, sheet_name="Route_Indicators")

# #Mapeo y creción de diccionarios de ICM
# mapping_scheme_kpi = Scheme_KPI.groupby('IDScheme')['IDKPI'].apply(list).to_dict()

# #calculamos el logro
# metas['Meta Cerveza'] = pd.to_numeric(metas['Meta Cerveza'], errors='coerce')
# metas.to_excel('aqui vas rey.xlsx', index = False)
# metas['Logro Cerveza'] = np.where(
#     metas['Meta Cerveza'] != 0,
#     metas['Real_Ingreso_Cerveza'] / metas['Meta Cerveza'] * 100,
#     0
# )
# metas['Logro Cerveza'] = metas['Logro Cerveza'].fillna(0)
# # porcentaje pago ING %%%
# metas['Pago Venta Cerveza'] = metas.apply(
#     lambda row: 125 if row['Logro Cerveza'] > 125 else (0 if row['Logro Cerveza'] < 90 else row['Logro Cerveza']),
#     axis=1
# )

# def calcular_pago_cerveza(row):
#     try:
#         if row['Esquema'] == 'SIX-ASESOR ING30-EJ20-TSV20-OTS30':
#             return row['Pago Venta Cerveza'] / 100 * 0.30 * row['Base Variable']
#         elif row['Esquema'] == 'SIX-ASESOR ING60-EJ20-TSV20':
#             return row['Pago Venta Cerveza'] / 100 * 0.60 * row['Base Variable']
#         else:
#             return 0
#     except:
#         return 0

# # Aplicar la función a cada fila del dataframe
# metas['Monto pago Cerveza'] = metas.apply(calcular_pago_cerveza, axis=1)

# ########### OC

# dict_real_ots = sA068.set_index('Número')['Real_Otras_Categorías'].to_dict()

# print(metas)


# metas['Resultado OC'] = metas['Número'].map(dict_real_ots)
# metas['Resultado OC'] = pd.to_numeric(metas['Resultado OC'], errors='coerce').fillna(0)
# metas['Meta OC'] = pd.to_numeric(metas['Meta OC'], errors='coerce')
# metas['Logro OC'] = np.where(
#     metas['Meta OC'] != 0,
#     metas['Resultado OC'] / metas['Meta OC'] * 100,
#     0
# )
# metas['Logro OC'].fillna(0)
# metas['Pago OC'] = metas.apply(
#     lambda row: 125 if row['Logro OC'] > 125 else (0 if row['Logro OC'] < 90 else row['Logro OC']),
#     axis=1
# )

# def calcular_pago_OC(row):
#     try:
#         if row['Esquema'] == 'SIX-ASESOR ING30-EJ20-TSV20-OTS30':
#             return row['Pago OC'] / 100 * 0.30 * row['Base Variable']
#         elif row['Esquema'] == 'SIX-ASESOR ING60-EJ20-TSV20':
#             return row['Pago OC'] / 100 * 0 * row['Base Variable']
#         else:
#             return 0
#     except:
#         return 0

# # Aplicar la función a cada fila del dataframe
# metas['Monto pago OC'] = metas.apply(calcular_pago_OC, axis=1)



############################################# hasta aca termina los logros y pago de kpis


########### las que siguen color verde
# metas['Pago'] = metas['Monto Pago Cerveza'] + metas['Monto Pago OC'] + metas['Monto Pago TSV'] +  +metas['Monto Pago Asesoria Dinamica'] +metas['Monto Pago Ejecución']
# print(metas['Pago'])

# metas['Pago Total Mes contra Variable'] = metas['Pago'] / metas['Base Variable']
# metas['Pago Total Mes contra salario Fijo y Variable'] = metas['Pago'] / metas['Total Mes']

# def clasificar_pago_total_mes(valor):
#     if valor == 0:
#         return "0%"
#     elif valor < 30:
#         return "1%-29%"
#     elif valor < 51:
#         return "30%-50%"
#     elif valor < 81:
#         return "51%-80%"
#     elif valor <= 100:
    #     return "81%-100%"
    # else:
    #     return "100%>"

# Aplicar la función a la columna 'Pago Total Mes'
#metas['Rango PAGO'] = metas['Pago Total Mes'].apply(clasificar_pago_total_mes)

metas.to_excel(f'CoVa_Operaciones_{mes}.xlsx', index = False)
fin = time.time() - inicio
fin = fin / 60
print(f'Resultado tomó {fin} minutos.')
print('Proceso terminado exitosamente')

pygame.init()

# Ruta del archivo de audio
audio_file = r'C:\Users\dominh05\Documents\My project (37).wav'

# Verificar si el archivo existe
if not os.path.exists(audio_file):
    print(f"El archivo '{audio_file}' no existe.")
else:
    # Reproducir el archivo de audio
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()

    # Esperar hasta que la música termine de reproducirse
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

# Terminar pygame
pygame.quit()
