import os
import pandas as pd
import time
import pygame
###!!! guardar los archivos de las metas con el nombre de la región en formato: NW,NE,WE,CE,SE
# ten en cuenta que los archivos deben de venir en para con el formato: df = pd.read_excel(filepath, sheet_name='ACS y JOS', skiprows=6)

inicio = time.time()
folder_path = r'C:\Users\dominh05\Documents\SIX\Codigos_six\CoVa\Metas operaciones'
#para el nombre del archivo solamente
mes = 'Mayo'

df_list = []

for filename in os.listdir(folder_path):
    if filename.endswith('.xlsx'):
        print(filename)
        filepath = os.path.join(folder_path, filename)
        print(f'Reading {filepath}...')
        
        # Lee el archivo Excel
        df = pd.read_excel(filepath, sheet_name='ACS y JOS', skiprows=6)
        
        # Extrae la región del nombre del archivo sin la extensión
        region_filtro, _ = os.path.splitext(filename)
        print(region_filtro, 'en proceso...')
        
        # Filtra el DataFrame por la columna 'Región'
        df_filtrado = df[df['Región'] == region_filtro]
        
        if not df_filtrado.empty:
            # Agrega una columna con el nombre del archivo
            df_filtrado['Archivo'] = filename
            df_list.append(df_filtrado)
            print(df_filtrado.columns)
            print(df_filtrado.shape)
            print(f'{len(df_list)} files read')

# Concatena todos los DataFrames de la lista
if df_list:
    combined_df = pd.concat(df_list)
    combined_df.to_excel(f'Metas_region {mes} 2025.xlsx', index=False)
else:
    print("No se encontraron archivos con la región especificada.")

fin = time.time() - inicio
fin = fin / 60
print(f'Resultado tomó {fin} minutos.')
print('Proceso terminado exitosamente')
# Inicializar pygame
pygame.init()

# Ruta del archivo de audio
audio_file = r'C:\Users\dominh05\Documents\My project (37).wav'

# Verificar si el archivo existe
if not os.path.exists(audio_file):
    print(f"El archivo '{audio_file}' no existe.")
else:
    # Reproducir el archivo de audio
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()

    # Esperar hasta que la música termine de reproducirse
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

# Terminar pygame
pygame.quit()
